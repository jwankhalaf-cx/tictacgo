@page "/game/{gameCode}";

@inject NavigationManager Navigation
@using Microsoft.AspNetCore.SignalR.Client
@using UI.Models
@using UI.Enums
@implements IAsyncDisposable

<PageTitle>TicTacGo Game</PageTitle>

<div class="bg-gradient-to-r from-violet-900 to-purple-900 h-screen pb-8 pt-40">
  <div class="flex justify-center gap-9 pb-6">
    @foreach (var player in _players)
    {
      <PlayerCard Player="@player" ActiveMark="@_activeMark" HasTurn="@HasTurn"/>
    }
  </div>

  <GameGrid
    GridCells="@_gameBoard"
    ActiveMark="@_activeMark"
    OnClickFunction="@MakeMove"
    ActivePlayerClientConnectionId="@_activePlayerClientConnectionId"/>
</div>

@code {

  [Parameter]
  public string GameCode { get; set; } = "";

  private HubConnection? _hubConnection;
  private readonly List<Player> _players = new();
  private readonly Marks[] _gameBoard = { Marks.NotSet, Marks.NotSet, Marks.NotSet, Marks.NotSet, Marks.NotSet, Marks.NotSet, Marks.NotSet, Marks.NotSet, Marks.NotSet };
  private Marks _activeMark = Marks.X;
  private bool HasTurn { get; set; } = true;
  private readonly string _activePlayerClientConnectionId = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    Console.WriteLine("Initialized Game.razor!");

    _hubConnection = new HubConnectionBuilder()
      .WithUrl(Navigation.ToAbsoluteUri($"/gamehub/{GameCode}"))
      .Build();

    _hubConnection.On("GiveTurn", () =>
    {
      HasTurn = true;

      InvokeAsync(StateHasChanged);
    });

    _hubConnection.On<MoveModel>("ReceiveMove", model =>
    {
      _gameBoard[model.CellIndex] = model.SetMark;
      _activeMark = model.NextMark;

      InvokeAsync(StateHasChanged);
    });

    _hubConnection.On<Player>("AddPlayer", model =>
    {
      _players.Add(model);

      InvokeAsync(StateHasChanged);
    });

    _hubConnection.On<Player>("RemovePlayer", model =>
    {
      _players.Remove(model);

      InvokeAsync(StateHasChanged);
    });

    await _hubConnection.StartAsync();
  }

  public bool IsConnected =>
    _hubConnection?.State == HubConnectionState.Connected;

  private async Task MakeMove(MoveModel model)
  {
    if (_hubConnection is not null)
    {
      await _hubConnection.SendAsync("MakeMove", model);
    }

    await GrantTurn();
  }

  private async Task GrantTurn()
  {
    HasTurn = false;

    if (_hubConnection is not null)
    {
      await _hubConnection.SendAsync("GiveTurn");
    }
  }

  public async ValueTask DisposeAsync()
  {
    if (_hubConnection is not null)
    {
      await _hubConnection.DisposeAsync();
    }
  }

}