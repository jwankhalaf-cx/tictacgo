@page "/game/{gameCode}";

@inject NavigationManager Navigation
@using Microsoft.AspNetCore.SignalR.Client
@using UI.Enums
@using UI.Models
@using UI.Components
@implements IAsyncDisposable

<PageTitle>TicTacGo Game</PageTitle>

<div class="pt-20">
  @if (_gameCanStart)
  {
    @if (_host is {HasWon: true })
    {
      @if (_host.ConnectionId == _clientConnectionId)
      {
        <WinnerScreen Winner="@_host" RestartGame="@RestartGame"/>
      }
      else
      {
        <LoserScreen Loser="@_guest" RestartGame="@RestartGame"/>
      }
    }
    else if (_guest is {HasWon: true })
    {
      @if (_guest.ConnectionId == _clientConnectionId)
      {
        <WinnerScreen Winner="@_guest" RestartGame="@RestartGame"/>
      }
      else
      {
        <LoserScreen Loser="@_host" RestartGame="@RestartGame"/>
      }
    }
    else if (_host is {HasTurn: false } && _guest is {HasTurn: false })
    {
      if (_host.ConnectionId == _clientConnectionId)
      {
        <DrawScreen Player="@_host" RestartGame="@RestartGame"/>
      }
      else
      {
        <DrawScreen Player="@_guest" RestartGame="@RestartGame"/>
      }
    }
    else
    {
      <div class="flex justify-center gap-9 pb-6">
        <PlayerCard Player="@_host" ClientConnectionId="@_clientConnectionId"/>

        <PlayerCard Player="@_guest" ClientConnectionId="@_clientConnectionId"/>
      </div>

      <GameGrid
        GridCells="@_gameBoard"
        ActiveMark="@_activeMark"
        OnClickFunction="@MakeMove"
        CanMakeMove="@CanMakeMove()"/>
    }
  }
  else
  {
    if (_gameCanStart)
    {
      <div class="flex justify-center gap-9 pb-6">
        <PlayerCard Player="@_host" ClientConnectionId="@_clientConnectionId"/>

        <PlayerCard Player="@_guest" ClientConnectionId="@_clientConnectionId"/>
      </div>

      <GameGrid
        GridCells="@_gameBoard"
        ActiveMark="@_activeMark"
        OnClickFunction="@MakeMove"
        CanMakeMove="@CanMakeMove()"/>
    }
    else
    {
      <GameCode GameShareCode="@GameCode"/>
    }
  }

</div>

@code {

  [Parameter]
  public string GameCode { get; set; } = "";

  private HubConnection? _hubConnection;
  private bool _gameCanStart;
  private Marks[]? _gameBoard;
  private Player? _host;
  private Player? _guest;
  private Marks _activeMark;
  private string _clientConnectionId = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    _hubConnection = new HubConnectionBuilder()
      .WithUrl(Navigation.ToAbsoluteUri($"/gamehub/{GameCode}"))
      .Build();

    _hubConnection.On<bool>("NotAllowedToJoin", notAllowedToJoin =>
    {
      Navigation.NavigateTo($"/ErrorPage", new NavigationOptions
      {
        HistoryEntryState = "Navigation state"
      });
    });

    _hubConnection.On<Models.Game>("RenderGame", game =>
    {
      _gameBoard = game.Board;
      _gameCanStart = game.CanStart;
      _host = game.Host;

      if (game.Guest is not null)
      {
        _guest = game.Guest;
      }

      if (_host is not null && _host.HasTurn)
      {
        _activeMark = _host.Mark;
      }
      else if (_guest is not null && _guest.HasTurn)
      {
        _activeMark = _guest.Mark;
      }

      InvokeAsync(StateHasChanged);
    });

    await _hubConnection.StartAsync();

    if (_hubConnection.ConnectionId != null) _clientConnectionId = _hubConnection.ConnectionId;
  }

  public bool IsConnected =>
    _hubConnection?.State == HubConnectionState.Connected;

  private async Task MakeMove(Move model)
  {
    if (CanMakeMove())
    {
      if (_hubConnection is not null)
      {
        if (_hubConnection.ConnectionId != null) model.ConnectionId = _hubConnection.ConnectionId;

        await _hubConnection.SendAsync("MakeMove", GameCode, model);
      }
    }
  }

  private bool CanMakeMove()
  {
    if (_host is null || _guest is null) return false;

    if (_host.HasTurn && _host.ConnectionId == _hubConnection?.ConnectionId)
    {
      return true;
    }

    return _guest.HasTurn && _guest.ConnectionId == _hubConnection?.ConnectionId;
  }

  public async Task RestartGame()
  {
    if (_hubConnection is not null)
    {
      await _hubConnection.SendAsync("RestartGame", GameCode);
    }
  }

  public async ValueTask DisposeAsync()
  {
    if (_hubConnection is not null)
    {
      await _hubConnection.DisposeAsync();
    }
  }

}