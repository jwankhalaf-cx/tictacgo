@page "/game";

@using Microsoft.AspNetCore.SignalR.Client
@using TicTacGo.Enums
@using TicTacGo.Models

@inject NavigationManager Navigation

@implements IAsyncDisposable

<PageTitle>TicTacGo Game</PageTitle>

<div class="bg-gradient-to-r from-violet-900 to-purple-900 h-screen">
    <div class="flex justify-center gap-9">
        <PlayerCard Image="https://www.pngall.com/wp-content/uploads/12/Avatar-Profile-Vector.png" Name="Dan" Mark="icons/x.svg" Active="@PlayerOne"></PlayerCard>
        <PlayerCard Image="https://www.pngall.com/wp-content/uploads/12/Avatar-Profile-PNG-Images-HD.png" Name="Emma" Mark="icons/o.svg" Active="@PlayerTwo"></PlayerCard>
    </div>
    
    <GameGrid GridCells="@GridCells" ActiveMark="@ActiveMark" OnClickFunction="@MakeMove" updateParentActiveMark="@updateActiveMark" />
</div>

@code {
    private HubConnection? hubConnection;
    public bool PlayerOne = true;
    public bool PlayerTwo = false;
    public Marks[] GridCells = new Marks[] { Marks.NotSet, Marks.NotSet, Marks.NotSet, Marks.NotSet, Marks.NotSet, Marks.NotSet, Marks.NotSet, Marks.NotSet, Marks.NotSet };
    private Marks ActiveMark = Marks.X;

    private void updateActiveMark (Marks mark) {
        ActiveMark = mark;
        if (ActiveMark == Marks.O){
            PlayerOne = true;
            PlayerTwo = false;
        }else {
            PlayerOne = false;
            PlayerTwo = true;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On<CellModel>("ReceiveMove", (model) =>
        {
            GridCells[model.CellIndex] = model.SetMark;
            
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async Task MakeMove(CellModel model)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("MakeMove", model);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}