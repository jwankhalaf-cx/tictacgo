@page "/game";

@using Microsoft.AspNetCore.SignalR.Client
@using TicTacGo.Enums
@using TicTacGo.Models

@inject NavigationManager Navigation

@implements IAsyncDisposable

<PageTitle>TicTacGo Game</PageTitle>

<div class="bg-gradient-to-r from-violet-900 to-purple-900 h-screen">
    <div class="flex justify-center gap-9">
        <PlayerCard Player="@PlayerOne" ActiveMark="@ActiveMark" />
        <PlayerCard Player="@PlayerTwo" ActiveMark="@ActiveMark" />
    </div>
    
    <GameGrid GridCells="@GameBoard" ActiveMark="@ActiveMark" OnClickFunction="@MakeMove" UpdateParentActiveMark="@UpdateActiveMark" />
</div>

@code {
    private HubConnection? hubConnection;
    public Marks[] GameBoard = new Marks[9];
    private Marks ActiveMark = Marks.X;

    PlayerModel PlayerOne = new PlayerModel
    {
      Name = "Dan",
      ImageUrl = "https://www.pngall.com/wp-content/uploads/12/Avatar-Profile-Vector.png",
      Mark = Marks.X,
    };

    PlayerModel PlayerTwo = new PlayerModel
    {
      Name = "Emma",
      ImageUrl = "https://www.pngall.com/wp-content/uploads/12/Avatar-Profile-PNG-Images-HD.png",
      Mark = Marks.O,
    };

    private void UpdateActiveMark(Marks mark) {
        if (mark == Marks.X)
        {
          ActiveMark = Marks.O;
        }
        else
        {
          ActiveMark = Marks.X;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On<Marks[]>("DrawGameBoard", (model) =>
        {
            GameBoard = model;
            
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<MoveModel>("ReceiveMove", (model) =>
        {
            GameBoard[model.CellIndex] = model.SetMark;
            ActiveMark = model.NextMark;
            
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async Task MakeMove(MoveModel model)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("MakeMove", model);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
