@page "/game";

@inject NavigationManager Navigation
@using Microsoft.AspNetCore.SignalR.Client
@using UI.Enums
@using UI.Models
@implements IAsyncDisposable

<PageTitle>TicTacGo Game</PageTitle>

<div class="bg-gradient-to-r from-violet-900 to-purple-900 h-screen pb-8 pt-40">
  <div class="flex justify-center gap-9 pb-6">
    <PlayerCard Player="@_playerOne" ActiveMark="@_activeMark"/>
    <PlayerCard Player="@_playerTwo" ActiveMark="@_activeMark"/>
  </div>

  <GameGrid
    GridCells="@_gameBoard"
    ActiveMark="@_activeMark"
    OnClickFunction="@MakeMove"
    UpdateParentActiveMark="@UpdateActiveMark"
    ConnectionId="@_connectionId"
    ActivePlayerClientConnectionId="@_activePlayerClientConnectionId"/>
</div>

@code {
  private HubConnection? _hubConnection;
  private Marks[] _gameBoard = new Marks[9];
  private Marks _activeMark = Marks.X;
  private string _connectionId = string.Empty;
  private string _activePlayerClientConnectionId = string.Empty;

  readonly PlayerModel _playerOne = new()
  {
    Name = "Dan",
    ImageUrl = "https://www.pngall.com/wp-content/uploads/12/Avatar-Profile-Vector.png",
    Mark = Marks.X
  };

  readonly PlayerModel _playerTwo = new()
  {
    Name = "Emma",
    ImageUrl = "https://www.pngall.com/wp-content/uploads/12/Avatar-Profile-PNG-Images-HD.png",
    Mark = Marks.O
  };

  private void UpdateActiveMark(Marks mark)
  {
    _activeMark = mark == Marks.X ? Marks.O : Marks.X;
  }

  protected override async Task OnInitializedAsync()
  {
    _hubConnection = new HubConnectionBuilder()
      .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
      .Build();

    _hubConnection.On<Marks[], string>("DrawGameBoard", (gameBoard, connectionId) =>
    {
      _gameBoard = gameBoard;
      _activePlayerClientConnectionId = connectionId;

      InvokeAsync(StateHasChanged);
    });

    _hubConnection.On<MoveModel>("ReceiveMove", model =>
    {
      _gameBoard[model.CellIndex] = model.SetMark;
      _activeMark = model.NextMark;

      InvokeAsync(StateHasChanged);
    });

    await _hubConnection.StartAsync();

    if (_hubConnection.ConnectionId != null) _connectionId = _hubConnection.ConnectionId;
    Console.WriteLine(_connectionId);
  }

  public bool IsConnected =>
    _hubConnection?.State == HubConnectionState.Connected;

  private async Task MakeMove(MoveModel model)
  {
    if (_hubConnection is not null)
    {
      await _hubConnection.SendAsync("MakeMove", model);
    }
  }

  public async ValueTask DisposeAsync()
  {
    if (_hubConnection is not null)
    {
      await _hubConnection.DisposeAsync();
    }
  }

}