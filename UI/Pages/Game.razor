@page "/game/{gameCode}";

@inject NavigationManager Navigation
@using Microsoft.AspNetCore.SignalR.Client
@using UI.Models
@using UI.Enums
@implements IAsyncDisposable

<PageTitle>TicTacGo Game</PageTitle>

<div class="bg-gradient-to-r from-violet-900 to-purple-900 h-screen pb-8 pt-40">
  <div class="flex justify-center gap-9 pb-6">
    @if (_host is not null)
    {
      <PlayerCard Player="@_host" ActiveMark="@_activeMark"/>
    }

    @if (_guest is not null)
    {
      <PlayerCard Player="@_guest" ActiveMark="@_activeMark"/>
    }
  </div>

  <GameGrid
    GridCells="@_gameBoard"
    ActiveMark="@_activeMark"
    OnClickFunction="@MakeMove"
    ActivePlayerClientConnectionId="@_activePlayerClientConnectionId"/>
</div>

@code {

  [Parameter]
  public string GameCode { get; set; } = "";

  private HubConnection? _hubConnection;
  private readonly List<Player> _players = new();
  private Marks[] _gameBoard = new Marks[9];
  private Player? _host;
  private Player? _guest;
  private Marks _activeMark = Marks.X;
  private bool HasTurn { get; set; } = true;
  private readonly string _activePlayerClientConnectionId = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    Console.WriteLine("Initialized Game.razor!");

    _hubConnection = new HubConnectionBuilder()
      .WithUrl(Navigation.ToAbsoluteUri($"/gamehub/{GameCode}"))
      .Build();

    _hubConnection.On<Models.Game>("RenderGame", game =>
    {
      Console.WriteLine($"RenderGame being called on {_hubConnection.ConnectionId}");

      _gameBoard = game.GetBoard();
      _host = game.Host;

      if (game.CanStart())
      {
        _guest = game.Guest;
      }

      InvokeAsync(StateHasChanged);
    });

    await _hubConnection.StartAsync();
  }

  public bool IsConnected =>
    _hubConnection?.State == HubConnectionState.Connected;

  private async Task MakeMove(Move model)
  {
    if (_hubConnection is not null)
    {
      await _hubConnection.SendAsync("MakeMove", GameCode, model);
    }
  }

  public async ValueTask DisposeAsync()
  {
    if (_hubConnection is not null)
    {
      await _hubConnection.DisposeAsync();
    }
  }

}